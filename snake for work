<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Snake Game</title>
  <style>
    canvas {
      border: 1px solid #000;
      display: block;
      margin: 0 auto;
    }
  </style>
</head>
<body>
  <canvas id="gameCanvas" width="600" height="600"></canvas>
  <script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    const gridSize = 20;
    const initialSnakeLength = 5;
    let snake = [];
    let direction = 'right';
    let food = generateFood();
    let lives = 3;
    let score = 0;

    // Initialize snake position in the middle of the canvas
    const initialX = Math.floor(canvas.width / (2 * gridSize));
    const initialY = Math.floor(canvas.height / (2 * gridSize));
    for (let i = 0; i < initialSnakeLength; i++) {
      snake.push({ x: initialX - i, y: initialY });
    }

    function generateFood() {
      return {
        x: Math.floor(Math.random() * (canvas.width / gridSize)),
        y: Math.floor(Math.random() * (canvas.height / gridSize))
      };
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      ctx.fillStyle = 'red';
      ctx.fillRect(food.x * gridSize, food.y * gridSize, gridSize, gridSize);

      ctx.fillStyle = 'green';
      snake.forEach(segment => {
        ctx.fillRect(segment.x * gridSize, segment.y * gridSize, gridSize, gridSize);
      });

      // Display lives and score
      ctx.fillStyle = 'black';
      ctx.font = '20px Arial';
      ctx.fillText('Lives: ' + lives, 10, 30);
      ctx.fillText('Score: ' + score, 10, 60);
    }

    function update() {
      const head = { x: snake[0].x, y: snake[0].y };

      if (direction === 'right') head.x++;
      else if (direction === 'left') head.x--;
      else if (direction === 'up') head.y--;
      else if (direction === 'down') head.y++;

      // Check for collision with food
      if (head.x === food.x && head.y === food.y) {
        food = generateFood();
        score += 10;
        // Grow the snake
        snake.unshift({ x: head.x, y: head.y });
      } else {
        // Move the snake without growing
        snake.pop();
        snake.unshift(head);
      }

      // Check for collision with walls
      if (
        head.x < 0 ||
        head.x >= canvas.width / gridSize ||
        head.y < 0 ||
        head.y >= canvas.height / gridSize
      ) {
        lives--;
        if (lives === 0) {
          gameOver();
          return;
        } else {
          reset();
          return;
        }
      }

      // Check for collision with itself
      if (snake.some((segment, index) => index !== 0 && segment.x === head.x && segment.y === head.y)) {
        lives--;
        if (lives === 0) {
          gameOver();
          return;
        } else {
          reset();
          return;
        }
      }
    }

    function reset() {
      // Reset snake position to the middle of the canvas
      snake = [];
      for (let i = 0; i < initialSnakeLength; i++) {
        snake.push({ x: initialX - i, y: initialY });
      }
      direction = 'right';
    }

    function gameOver() {
      clearInterval(gameLoopInterval);
      alert('Game Over! Your score: ' + score);
    }

    function gameLoop() {
      update();
      draw();
    }

    document.addEventListener('keydown', e => {
      if (e.key === 'ArrowRight' && direction !== 'left') direction = 'right';
      else if (e.key === 'ArrowLeft' && direction !== 'right') direction = 'left';
      else if (e.key === 'ArrowUp' && direction !== 'down') direction = 'up';
      else if (e.key === 'ArrowDown' && direction !== 'up') direction = 'down';
    });

    const gameLoopInterval = setInterval(gameLoop, 100);
  </script>
</body>
</html>
